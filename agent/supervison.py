""" <WIP>
AI Strategy Supervising Analyst Agent
Analyzes historical strategy backtests to identify optimal trade entries based on previously generated code.
This Python script implements an AI agent that analyzes historical trading strategy performance from an Excel report and provides actionable suggestions for future trades. The agent processes backtest results generated by a strategy-generating AI to identify optimal entry points and improve trading performance.

Input: Excel report containing:
    - Strategy prompts
    - Generated code
    - Backtest results
    
Output: Actionable trading suggestions based on best-performing historical patterns.

# Features:

1) Excel Report Analysis (Reads and parses Excel reports containing):
- Historical trading prompts (strategy descriptions)
- Generated strategy code
- Backtest performance metrics
- Entry/exit points and their results

2) Performance Evaluation(Identifies the most successful historical strategies based on):
- Profitability metrics (ROI, Sharpe ratio, win rate)
- Risk-adjusted returns
- Consistency across market conditions

3) Suggestion Generation(Recommends optimal trade entries by):
- Finding patterns in successful historical trades
- Analyzing market conditions that led to best performance
- Identifying undervalued opportunities based on past successes
- Calculating risk/reward ratios for potential entries

Continuous Learning:
- Maintains and updates knowledge base from new backtest results
- Adapts suggestions based on evolving market conditions
- Tracks suggestion performance to improve future recommendations

Output the agent should provide:
- Ranked list of best historical strategies
- Actionable suggestions for future trades
- Suggested entries with:
    - Expected performance
    - Confidence scores
    - Similar historical patterns
- Updated Insights report with new suggestions
"""

import os
import pandas as pd
from langchain_core.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv

load_dotenv()

llm = ChatOpenAI(
    model="nvidia/llama-3.3-nemotron-super-49b-v1",  # change model if needed
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url="https://integrate.api.nvidia.com/v1",
    temperature=0.5,
)

report_review_prompt = PromptTemplate.from_template("""
You are a quantitative strategy review expert.

You are given an Excel report with the following columns:
- timestamp
- strategy_description
- strategy_code
- backtest_results
- improved_strategy_description
- improved_strategy_code
- improved_backtest_results

Assume that a higher numeric value in the "improved_backtest_results" column indicates better performance.

Based on the data below, identify the top {top_n} strategies and provide tailored suggestions on how their design could be further improved.

Data:
{data}

Return your suggestions as a brief summary.
""")

def analyze_reports(report_file="strategy_results.xlsx", top_n=3):
    """
    Reads the report Excel file from the reports folder,
    selects the top_n rows based on `improved_backtest_results`
    (assuming numeric values), and uses an LLM to generate suggestions.
    """
    # Build the full path: assume your reports folder is one level up from agent folder.
    base_dir = os.path.dirname(os.path.abspath(__file__))
    reports_dir = os.path.join(base_dir, "..", "reports")
    report_path = os.path.join(reports_dir, report_file)
    
    if not os.path.exists(report_path):
        return "Report file does not exist."
    
    df = pd.read_excel(report_path)
    
    # Attempt to convert the improved_backtest_results column to numeric (if possible)
    df["improved_metric"] = pd.to_numeric(df["improved_backtest_results"], errors="coerce")
    
    # Sort by improved_metric descending, or if no numeric values then simply take first top_n entries.
    if df["improved_metric"].notnull().any():
        df_top = df.sort_values(by="improved_metric", ascending=False).head(top_n)
    else:
        df_top = df.head(top_n)
    
    # Create a summary string from the top entries.
    # You might want to only include the relevant columns.
    data_summary = df_top[[
        "timestamp", 
        "strategy_description", 
        "strategy_code", 
        "improved_strategy_description", 
        "improved_backtest_results"
    ]].to_string(index=False)
    
    # Generate suggestions using the LLM.
    prompt_text = report_review_prompt.format(top_n=top_n, data=data_summary)
    response = llm.invoke(prompt_text)
    text = response.get("text", "") if isinstance(response, dict) else str(response)
    
    return text

if __name__ == "__main__":
    suggestions = analyze_reports()
    print("Strategy Improvement Suggestions:")
    print(suggestions)